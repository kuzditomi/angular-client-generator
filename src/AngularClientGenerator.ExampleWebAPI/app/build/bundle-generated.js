(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GeneratedClient;
(function (GeneratedClient) {
    GeneratedClient.Module = angular.module('example-generated', []);
    var addr = window['ApiHost'];
    if (addr.indexOf('ApiHost') !== -1) {
        addr = 'http://localhost:1337/';
    }
    GeneratedClient.BASE_URL = addr;
    GeneratedClient.API_SUFFIX = '';
    GeneratedClient.API_BASE_URL = GeneratedClient.BASE_URL + GeneratedClient.API_SUFFIX;
    function replaceUrl(url, params) {
        var replaced = url;
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var param = params[key];
                replaced = replaced.replace('{' + key + '}', param);
            }
        }
        return replaced;
    }
    var ApiExampleService = /** @class */ (function () {
        function ApiExampleService(http, q) {
            var _this = this;
            this.http = http;
            this.q = q;
            this.ExampleMethod = function (id) {
                return _this.http(_this.ExampleMethodConfig(id))
                    .then(function (resp) {
                    return resp.data;
                }, function (resp) {
                    return _this.q.reject({
                        Status: resp.status,
                        Message: (resp.data && resp.data.Message) || resp.statusText,
                        Data: resp.data,
                    });
                });
            };
        }
        ApiExampleService.prototype.ExampleMethodConfig = function (id) {
            return {
                url: replaceUrl(GeneratedClient.API_BASE_URL + 'api/example/{id}', {
                    id: id,
                }),
                method: 'GET',
            };
        };
        ApiExampleService.$inject = ['$http', '$q'];
        return ApiExampleService;
    }());
    GeneratedClient.ApiExampleService = ApiExampleService;
    GeneratedClient.Module.service('ApiExampleService', ApiExampleService);
    var ExampleWebAPI;
    (function (ExampleWebAPI) {
        var Models;
        (function (Models) {
            var Color;
            (function (Color) {
                Color[Color["Red"] = 0] = "Red";
                Color[Color["Green"] = 1] = "Green";
                Color[Color["Blue"] = 2] = "Blue";
            })(Color = Models.Color || (Models.Color = {}));
        })(Models = ExampleWebAPI.Models || (ExampleWebAPI.Models = {}));
    })(ExampleWebAPI = GeneratedClient.ExampleWebAPI || (GeneratedClient.ExampleWebAPI = {}));
    var EnumHelperService = /** @class */ (function () {
        function EnumHelperService() {
            var _this = this;
            this.Register = function (name, enumtype, titles) {
                _this.RegisterArray(name, enumtype, titles);
                _this.RegisterHash(name, enumtype, titles);
            };
            this.RegisterArray = function (enumname, enumtype, titles) {
                var enumArray = [];
                for (var enumMember in enumtype) {
                    var isValueProperty = parseInt(enumMember, 10) >= 0;
                    if (isValueProperty) {
                        var name_1 = enumtype[enumMember];
                        var value = parseInt(enumMember);
                        var title = (titles && titles[name_1]) || name_1;
                        enumArray.push({ Name: name_1, Value: value, Title: title });
                    }
                }
                _this[enumname] = enumArray;
            };
            this.Register('Color', ExampleWebAPI.Models.Color, {
                Red: 'Red',
                Green: 'Green',
                Blue: 'Blue',
            });
        }
        EnumHelperService.prototype.RegisterHash = function (enumname, enumtype, titles) {
            var enumObj = {};
            for (var enumMember in enumtype) {
                var isValueProperty = parseInt(enumMember, 10) >= 0;
                var name_2 = isValueProperty ? enumtype[enumMember] : enumMember;
                var value = isValueProperty ? parseInt(enumMember) : parseInt(enumtype[enumMember]);
                var title = titles ? titles[name_2] : name_2;
                enumObj[enumMember] = ({ Name: name_2, Value: value, Title: title });
            }
            this[enumname + 'Obj'] = enumObj;
        };
        return EnumHelperService;
    }());
    GeneratedClient.EnumHelperService = EnumHelperService;
    GeneratedClient.Module.service('Enums', EnumHelperService);
})(GeneratedClient = exports.GeneratedClient || (exports.GeneratedClient = {}));
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
