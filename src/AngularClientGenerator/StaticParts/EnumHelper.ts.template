	public Register = (name: string, enumtype: any, titles?: { [key: string]: string }) => {
        this.RegisterArray(name, enumtype, titles);
        this.RegisterHash(name, enumtype, titles);
    }

	private RegisterArray = (enumname: string, enumtype: any, titles?: { [key: string]: string }) => {
        var enumArray = [];
        for (var enumMember in enumtype) {
            var isValueProperty = parseInt(enumMember, 10) >= 0;
            if (isValueProperty) {
                var name = enumtype[enumMember];
                var value = parseInt(enumMember);
                var title = (titles && titles[name]) || name;
    
                enumArray.push({ Name: name, Value: value, Title: title});
            }
        }
    
        this[enumname] = enumArray;
    }
    
    private RegisterHash(enumname: string, enumtype: any, titles?: { [key: string]: string }) {
        var enumObj = {};
        for (var enumMember in enumtype) {
            var isValueProperty = parseInt(enumMember, 10) >= 0;
            var name = isValueProperty? enumtype[enumMember] : enumMember;
            var value = isValueProperty ? parseInt(enumMember) : parseInt(enumtype[enumMember]);
            var title = titles ? titles[name] : name; 

            enumObj[enumMember] = ({ Name: name, Value: value, Title: title });
        }
    
        this[enumname + 'Obj'] = enumObj;
    }
}

Module.service('Enums', EnumHelperService);
